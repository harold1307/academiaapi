generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model MallaCurricular {
  id String @id @default(uuid())

  tipoDuracion              TipoDuracion
  fechaAprobacion           DateTime
  fechaLimiteVigencia       DateTime
  niveles                   Int
  maximoMateriasMatricula   Int
  cantidadLibreOpcionEgreso Int
  cantidadOptativasEgreso   Int
  cantidadArrastres         Int
  practicasLigadasMaterias  Boolean
  horasPractica             Float
  registroPracticasDesde    Int
  horasVinculacion          Float
  registroVinculacionDesde  Int
  registroProyectosDesde    Int
  usaNivelacion             Boolean
  plantillasSilabo          Boolean
  observaciones             String?
  createdAt                 DateTime     @default(now())
  updatedAt                 DateTime     @default(now()) @updatedAt
  perfilEgreso              String?

  tituloObtenidoId String
  tituloObtenido   TituloObtenido @relation(fields: [tituloObtenidoId], references: [id])
  modalidadId      String
  modalidad        Modalidad      @relation(fields: [modalidadId], references: [id])
  programaId       String
  programa         Programa       @relation(fields: [programaId], references: [id])

  asignaturasEnMalla AsignaturaEnMalla[]
  lugaresEjecucion   LugarEjecucion[]

  @@map("mallas_curriculares")
}

model Sede {
  id               String           @id @default(uuid())
  nombre           String
  pais             String
  provincia        String
  canton           String
  codigo           String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @default(now()) @updatedAt
  lugaresEjecucion LugarEjecucion[]
  titulos          Titulo[]
  sesiones         Sesion[]
  coordinaciones   Coordinacion[]

  @@map("sedes")
}

model Asignatura {
  id                         String                      @id @default(uuid())
  nombre                     String
  codigo                     String?
  asignaturasEnMalla         AsignaturaEnMalla[]
  asignaturasEnVarianteCurso AsignaturaEnVarianteCurso[]
  asignaturasEnCursoEscuela  AsignaturaEnCursoEscuela[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("asignaturas")
}

model AsignaturaEnMalla {
  id                        String           @id @default(uuid())
  nivel                     Int
  tipoAsignatura            TipoAsignatura
  identificacion            String
  permiteMatriculacion      Boolean
  validaCredito             Boolean
  validaPromedio            Boolean
  costoEnMatricula          Boolean
  practicasPreProfesionales Boolean
  requeridaEgreso           Boolean
  cantidadMatriculas        Int
  horasSemanales            Float
  horasColaborativas        Float
  horasAsistidasDocente     Float
  horasAutonomas            Float
  horasPracticas            Float
  creditos                  Float
  noValidaAsistencia        Boolean
  materiaComun              Boolean
  objetivos                 String?
  descripcion               String?
  resultadosAprendizaje     String?
  createdAt                 DateTime         @default(now())
  updatedAt                 DateTime         @default(now()) @updatedAt
  asignaturaId              String
  mallaId                   String
  areaConocimientoId        String
  campoFormacionId          String
  ejeFormativoId            String?
  esAnexo                   Boolean          @default(false)
  sumaHoras                 Boolean
  areaConocimiento          AreaConocimiento @relation(fields: [areaConocimientoId], references: [id])
  asignatura                Asignatura       @relation(fields: [asignaturaId], references: [id])
  campoFormacion            CampoFormacion   @relation(fields: [campoFormacionId], references: [id])
  ejeFormativo              EjeFormativo?    @relation(fields: [ejeFormativoId], references: [id])
  malla                     MallaCurricular  @relation(fields: [mallaId], references: [id])
  competenciaGenerica       Competencia?

  @@index([areaConocimientoId], map: "asignaturas_en_mallas_areaConocimientoId_fkey")
  @@index([asignaturaId], map: "asignaturas_en_mallas_asignaturaId_fkey")
  @@index([campoFormacionId], map: "asignaturas_en_mallas_campoFormacionId_fkey")
  @@index([ejeFormativoId], map: "asignaturas_en_mallas_ejeFormativoId_fkey")
  @@index([mallaId], map: "asignaturas_en_mallas_mallaId_fkey")
  @@map("asignaturas_en_mallas")
}

model AsignaturaEnVarianteCurso {
  id                    String  @id @default(uuid())
  validaCredito         Boolean
  validaPromedio        Boolean
  horasColaborativas    Float
  horasAsistidasDocente Float
  horasAutonomas        Float
  horasPracticas        Float
  sumaHoras             Boolean
  creditos              Float
  requeridoAprobar      Boolean
  asistenciaAprobar     Int

  asignaturaId       String
  varianteCursoId    String
  asignatura         Asignatura        @relation(fields: [asignaturaId], references: [id])
  varianteCurso      VarianteCurso     @relation(fields: [varianteCursoId], references: [id], onDelete: Cascade)
  modeloEvaluativoId String?
  modeloEvaluativo   ModeloEvaluativo? @relation(fields: [modeloEvaluativoId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([asignaturaId], map: "asignaturas_en_variantes_curso_asignaturaId_fkey")
  @@index([varianteCursoId], map: "asignaturas_en_variantes_curso_varianteCursoId_fkey")
  @@map("asignaturas_en_variantes_curso")
}

model LugarEjecucion {
  id      String          @id @default(uuid())
  codigo  String?
  mallaId String
  sedeId  String
  sede    Sede            @relation(fields: [sedeId], references: [id])
  malla   MallaCurricular @relation(fields: [mallaId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([sedeId], map: "lugares_ejecucion_sedeId_fkey")
  @@index([mallaId], map: "lugares_ejecucion_mallaId_fkey")
  @@map("lugares_ejecucion")
}

model Titulo {
  id     String @id @default(uuid())
  nombre String

  sedeId String?
  sede   Sede?   @relation(fields: [sedeId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([sedeId], map: "titulos_sedeId_fkey")
  @@map("titulos")
}

model CursoEscuela {
  id     String  @id @default(uuid())
  nombre String
  codigo String?

  paraleloId String
  paralelo   Paralelo @relation(fields: [paraleloId], references: [nombre])
  sesionId   String
  sesion     Sesion   @relation(fields: [sesionId], references: [id])

  tema                String
  observaciones       String?
  departamento        String?
  fechaInicio         DateTime
  fechaFin            DateTime
  fechaLimiteRegistro DateTime
  diasLimitePago      Int
  nivel               Int
  cupos               Int?
  evaluaProfesor      Boolean
  matriculaConDeuda   Boolean
  legalizarMatriculas Boolean

  registroExterno       Boolean
  registroInterno       Boolean
  verificarSesion       Boolean
  registroDesdeOtraSede Boolean
  edadMinima            Int?
  edadMaxima            Int?
  costoPorMateria       Boolean
  cumpleRequisitosMalla Boolean
  pasarRecord           Boolean
  aprobarCursoPrevio    Boolean

  plantillaId String?
  plantilla   VarianteCurso? @relation(fields: [plantillaId], references: [id])

  asignaturas AsignaturaEnCursoEscuela[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("curso_escuelas")
}

model AsignaturaEnCursoEscuela {
  id String @id @default(uuid())

  validaCredito         Boolean
  validaPromedio        Boolean
  horasColaborativas    Float
  horasAsistidasDocente Float
  horasAutonomas        Float
  horasPracticas        Float
  sumaHoras             Boolean
  creditos              Float
  requeridoAprobar      Boolean
  asistenciaAprobar     Int

  asignaturaId       String
  asignatura         Asignatura        @relation(fields: [asignaturaId], references: [id])
  cursoEscuelaId     String
  cursoEscuela       CursoEscuela      @relation(fields: [cursoEscuelaId], references: [id])
  profesorId         String?
  profesor           User?             @relation(fields: [profesorId], references: [id])
  modeloEvaluativoId String?
  modeloEvaluativo   ModeloEvaluativo? @relation(fields: [modeloEvaluativoId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("asignatura_en_curso_escuela")
}

model Paralelo {
  nombre String @id
  orden  Int

  cursoEscuelas CursoEscuela[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("paralelos")
}

model Curso {
  id          String          @id @default(uuid())
  estado      Boolean         @default(true)
  nombre      String
  certificado String?
  alias       String?
  variantes   VarianteCurso[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("cursos")
}

model VarianteCurso {
  id                    String                      @id @default(uuid())
  nombre                String
  codigoBase            String
  descripcion           String
  registroExterno       Boolean
  registroInterno       Boolean
  verificarSesion       Boolean
  edadMinima            Int?
  edadMaxima            Int?
  cursoId               String
  aprobarCursoPrevio    Boolean
  costoPorMateria       Boolean
  cumpleRequisitosMalla Boolean
  fechaAprobacion       DateTime
  pasarRecord           Boolean
  registroDesdeOtraSede Boolean
  estado                Boolean                     @default(false)
  asignaturas           AsignaturaEnVarianteCurso[]
  curso                 Curso                       @relation(fields: [cursoId], references: [id], onDelete: Cascade)
  cursoEscuelas         CursoEscuela[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([cursoId], map: "variantes_de_cursos_cursoId_fkey")
  @@map("variantes_de_cursos")
}

model Competencia {
  id     String          @id @default(uuid())
  tipo   TipoCompetencia
  nombre String

  asignaturaEnMallaId String?            @unique
  asignaturaEnMalla   AsignaturaEnMalla? @relation(fields: [asignaturaEnMallaId], references: [id], onDelete: SetNull)
  programaId          String?
  programa            Programa?          @relation(fields: [programaId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("competencias")
}

model EjeFormativo {
  id                 String              @id @default(uuid())
  nombre             String
  asignaturasEnMalla AsignaturaEnMalla[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("ejes_formativos")
}

model AreaConocimiento {
  id                 String              @id @default(uuid())
  nombre             String
  codigo             String?
  asignaturasEnMalla AsignaturaEnMalla[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("areas_de_conocimiento")
}

model CampoFormacion {
  id                 String              @id @default(uuid())
  nombre             String
  asignaturasEnMalla AsignaturaEnMalla[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("campos_de_formacion")
}

model ModeloContrato {
  id             String  @id @default(uuid())
  estado         Boolean
  nombre         String
  descripcion    String
  paraProfesores Boolean
  archivoUrl     String  @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("modelos_contrato")
}

model Grupo {
  nombre String @id

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("grupos")
}

model Modalidad {
  id     String  @id @default(uuid())
  nombre String
  alias  String?

  mallas MallaCurricular[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("modalidades")
}

model Turno {
  id       String   @id @default(uuid())
  estado   Boolean  @default(false)
  horas    Float
  comienza DateTime @db.Time(0)
  termina  DateTime @db.Time(0)
  sesionId String
  sesion   Sesion   @relation(fields: [sesionId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("turnos")
}

model AlternativaEvaluacion {
  id     String @id @default(uuid())
  nombre String
  codigo String

  camposModeloEvaluativo CampoModeloEvaluativo[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("alternativas_evaluacion")
}

model CampoModeloEvaluativo {
  id                      String  @id @default(uuid())
  codigo                  String
  ordenActa               Int
  notaMaxima              Float
  notaMinima              Float
  decimales               Int
  campoDependiente        Boolean
  actualizaEstado         Boolean
  actualizaEstadoNegativo Boolean
  determinaEstadoFinal    Boolean
  defineMaximos           Boolean

  alternativaId      String
  alternativa        AlternativaEvaluacion @relation(fields: [alternativaId], references: [id])
  modeloEvaluativoId String
  modeloEvaluativo   ModeloEvaluativo      @relation(fields: [modeloEvaluativoId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("campos_modelo_evaluativo")
}

model ModeloEvaluativo {
  id                              String  @id @default(uuid())
  estado                          Boolean @default(false)
  nombre                          String
  notaMaxima                      Float
  notaAprobatoria                 Float
  notaRecuperacion                Float
  porcentajeAsistenciaAprobatoria Int
  decimalesNotaFinal              Int
  defineMaximos                   Boolean
  camposActualizanEstado          Boolean
  observaciones                   String?

  campos                     CampoModeloEvaluativo[]
  asignaturasEnVarianteCurso AsignaturaEnVarianteCurso[]
  asignaturasEnCursoEscuela  AsignaturaEnCursoEscuela[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("modelos_evaluativos")
}

model ModeloNivelacion {
  id                 String  @id @default(uuid())
  estado             Boolean @default(false)
  nombre             String
  notaMaxima         Float
  notaAprobatoria    Float
  decimalesNotaFinal Int
  observaciones      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("modelos_nivelacion")
}

model CampoProyectoIntegrador {
  id                   String  @id @default(uuid())
  nombre               String
  codigo               String
  observaciones        String?
  ordenActa            Int
  notaMaxima           Float
  notaMinima           Float
  decimales            Int
  campoDependiente     Boolean
  actualizaEstado      Boolean
  determinaEstadoFinal Boolean

  proyectoIntegradorId String
  proyectoIntegrador   ProyectoIntegrador @relation(fields: [proyectoIntegradorId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("campos_proyectos_integradores")
}

model ProyectoIntegrador {
  id                 String  @id @default(uuid())
  estado             Boolean @default(false)
  nombre             String
  notaMaxima         Float
  notaAprobatoria    Float
  decimalesNotaFinal Int
  observaciones      String?

  campos CampoProyectoIntegrador[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("proyectos_integradores")
}

model Sesion {
  id     String  @id @default(uuid())
  estado Boolean @default(false)
  nombre String
  alias  String

  sedeId String
  sede   Sede   @relation(fields: [sedeId], references: [id])

  lunes     Boolean
  martes    Boolean
  miercoles Boolean
  jueves    Boolean
  viernes   Boolean
  sabado    Boolean
  domingo   Boolean

  cursoEscuelas CursoEscuela[]
  turnos        Turno[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("sesiones")
}

model Recurso {
  id     String @id @default(uuid())
  nombre String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("recursos")
}

model MetodologiaAprendizaje {
  id     String @id @default(uuid())
  nombre String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("metodologias_aprendizaje")
}

model PerfilPractica {
  id          String  @id @default(uuid())
  nombre      String
  capacidades String?
  resultados  String?
  actividades String?

  perfilesPracticaProgramas PerfilPracticaEnPrograma[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("perfiles_practica")
}

model PerfilPracticaEnPrograma {
  perfilPracticaId String
  perfilPractica   PerfilPractica @relation(fields: [perfilPracticaId], references: [id])
  programaId       String
  programa         Programa       @relation(fields: [programaId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@id([perfilPracticaId, programaId])
  @@map("perfiles_practica_programas")
}

model ProductoAcreditableEvaluacion {
  id     String @id @default(uuid())
  nombre String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("productos_acreditables_evaluacion")
}

model TipoDocumento {
  id                String  @id @default(uuid())
  nombre            String
  titulo            Boolean
  actaGrado         Boolean
  cedula            Boolean
  papeletaVotacion  Boolean
  carnetConadis     Boolean
  convalidacion     Boolean
  partidaNacimiento Boolean
  preNivelacion     Boolean
  serviciosBasicos  Boolean
  examenIngreso     Boolean
  paraPasantia      Boolean

  programas TipoDocumentoEnPrograma[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("tipos_documento")
}

model TipoDocumentoEnPrograma {
  id               String  @id @default(uuid())
  requeridoFisico  Boolean
  requeridoDigital Boolean

  tipoDocumentoId String
  tipoDocumento   TipoDocumento @relation(fields: [tipoDocumentoId], references: [id])
  programaId      String
  programa        Programa      @relation(fields: [programaId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("tipo_documento_programa")
}

model NivelTitulacion {
  id       String                   @id @default(uuid())
  nombre   String
  detalles DetalleNivelTitulacion[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("niveles_titulacion")
}

model DetalleNivelTitulacion {
  id     String @id @default(uuid())
  nombre String

  programas Programa[]

  nivelTitulacionId String
  nivelTitulacion   NivelTitulacion @relation(fields: [nivelTitulacionId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("detalles_niveles_titucion")
}

model TituloObtenido {
  id     String @id @default(uuid())
  nombre String

  programaId String
  programa   Programa @relation(fields: [programaId], references: [id])

  mallasCurriculares MallaCurricular[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("titulos_obtenidos")
}

model Coordinacion {
  id     String @id @default(uuid())
  nombre String
  alias  String

  sedeId String
  sede   Sede   @relation(fields: [sedeId], references: [id])

  programas Programa[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("coordinaciones")
}

model Programa {
  id      String  @id @default(uuid())
  estado  Boolean @default(false)
  nombre  String
  mencion String?
  alias   String

  detalleNivelTitulacionId String
  detalleNivelTitulacion   DetalleNivelTitulacion @relation(fields: [detalleNivelTitulacionId], references: [id])
  coordinacionId           String
  coordinacion             Coordinacion           @relation(fields: [coordinacionId], references: [id])

  competencias              Competencia[]
  perfilesPracticaProgramas PerfilPracticaEnPrograma[]
  titulosObtenidos          TituloObtenido[]
  documentosRequeridos      TipoDocumentoEnPrograma[]
  mallasCurriculares        MallaCurricular[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("programas")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  expires_in        Int?
  ext_expires_in    Int?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId], map: "accounts_userId_fkey")
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "sessions_userId_fkey")
  @@map("sessions")
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?   @db.Text
  accounts      Account[]
  sessions      Session[]

  asignaturasEnCursoEscuelas AsignaturaEnCursoEscuela[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@id([identifier, token])
  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum TipoDuracion {
  HORAS
  SEMESTRES
  CREDITOS
  ANOS

  @@map("tipo_duracion")
}

enum TipoCompetencia {
  ESPECIFICA
  GENERICA

  @@map("tipo_competencia")
}

enum TipoAsignatura {
  PRACTICA
  TEORICA
  TEORICA_PRACTICA

  @@map("tipo_asignatura")
}
