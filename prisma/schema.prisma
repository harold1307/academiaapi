generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model MallaCurricular {
  id                        String       @id @default(uuid())
  modalidad                 Modalidad
  tituloObtenido            String
  tipoDuracion              TipoDuracion
  fechaAprobacion           DateTime
  fechaLimiteVigencia       DateTime
  niveles                   Int
  maximoMateriasMatricula   Int
  cantidadLibreOpcionEgreso Int
  cantidadOptativasEgreso   Int
  cantidadArrastres         Int
  practicasLigadasMaterias  Boolean
  horasPractica             Float
  registroPracticasDesde    Int
  horasVinculacion          Float
  registroVinculacionDesde  Int
  registroProyectosDesde    Int
  usaNivelacion             Boolean
  plantillasSilabo          Boolean
  perfilEgreso              String?
  observaciones             String?
  createdAt                 DateTime     @default(now())

  asignaturasEnMalla AsignaturaEnMalla[]
  lugaresEjecucion   LugarEjecucion[]

  @@map("mallas_curriculares")
}

model Institucion {
  id        String          @id @default(uuid())
  nombre    String
  tipo      TipoInstitucion
  pais      String
  provincia String
  canton    String
  codigo    String
  titulos   Titulo[]
  createdAt DateTime        @default(now())

  lugaresEjecucion LugarEjecucion[]

  @@map("instituciones")
}

enum Modalidad {
  VIRTUAL
  PRESENCIAL
  DUAL
  EN_LINEA
  SEMIPRESENCIAL

  @@map("modalidad")
}

enum TipoDuracion {
  HORAS
  SEMESTRES
  CREDITOS
  ANOS

  @@map("tipo_duracion")
}

enum TipoInstitucion {
  FISCAL
  PARTICULAR

  @@map("tipo_institucion")
}

model Asignatura {
  id     String  @id @default(uuid())
  nombre String
  codigo String?

  asignaturasEnMalla AsignaturaEnMalla[]

  @@map("asignaturas")
}

model AsignaturaEnMalla {
  id             String         @id @default(uuid())
  esAnexo        Boolean        @default(false) // campo de ayuda si la asignatura es un modulo anexo al programa
  nivel          Int
  // ???????????????????????????????????????????
  tipoAsignatura TipoAsignatura
  identificacion String
  // ???????????????????????????????????????????

  permiteMatriculacion      Boolean
  validaCredito             Boolean
  validaPromedio            Boolean
  costoEnMatricula          Boolean
  practicasPreProfesionales Boolean
  requeridaEgreso           Boolean

  cantidadMatriculas    Int
  horasSemanales        Float
  horasColaborativas    Float
  horasAsistidasDocente Float
  horasAutonomas        Float
  horasPracticas        Float
  sumaHoras             Boolean
  creditos              Float

  noValidaAsistencia Boolean
  materiaComun       Boolean // ???????????????????????????????????????????

  objetivos             String?
  descripcion           String?
  resultadosAprendizaje String?

  competenciaGenerica Competencia?

  createdAt DateTime @default(now())

  asignaturaId       String
  asignatura         Asignatura       @relation(fields: [asignaturaId], references: [id])
  mallaId            String
  malla              MallaCurricular  @relation(fields: [mallaId], references: [id])
  ejeFormativoId     String?
  ejeFormativo       EjeFormativo?    @relation(fields: [ejeFormativoId], references: [id])
  areaConocimientoId String
  areaConocimiento   AreaConocimiento @relation(fields: [areaConocimientoId], references: [id])
  campoFormacionId   String
  campoFormacion     CampoFormacion   @relation(fields: [campoFormacionId], references: [id])

  @@map("asignaturas_en_mallas")
}

model LugarEjecucion {
  id     String  @id @default(uuid())
  codigo String?

  mallaId       String
  malla         MallaCurricular @relation(fields: [mallaId], references: [id])
  institucionId String
  institucion   Institucion     @relation(fields: [institucionId], references: [id])

  @@map("lugares_ejecucion")
}

model Titulo {
  id     String @id @default(uuid())
  nombre String

  institucionId String?
  institucion   Institucion? @relation(fields: [institucionId], references: [id], onDelete: SetNull)

  @@map("titulos")
}

// pagina 45
// falta adicionar carreras - pagina 49
// falta asignaturas - pagina 49
// falta costos - pagina 49
model Curso {
  id          String  @id @default(uuid())
  estado      Boolean @default(true)
  nombre      String
  certificado String?
  alias       String?

  variantes VarianteCurso[]

  @@map("cursos")
}

// pagina 47
model VarianteCurso {
  id          String @id @default(uuid())
  nombre      String
  codigoBase  String
  descripcion String

  fechaAprobacion       DateTime
  registroDesdeOtraSede Boolean
  costoPorMateria       Boolean
  cumpleRequisitosMalla Boolean
  pasarRecord           Boolean
  aprobarCursoPrevio    Boolean

  // registro
  registroExterno Boolean // permite registro externo en la pagina de la institucion
  registroInterno Boolean

  // verificar sesion y edad
  verificarSesion Boolean

  verificarEdad Boolean
  edadMinima    Int?
  edadMaxima    Int?

  cursoId String
  curso   Curso  @relation(fields: [cursoId], references: [id])

  @@map("variantes_de_cursos")
}

// cuando es generica el estado es null ya que
// no interesa si esta en uso cuando es generica
model Competencia {
  id     String          @id @default(uuid())
  tipo   TipoCompetencia
  nombre String

  asignaturaEnMallaId String?            @unique
  asignaturaEnMalla   AsignaturaEnMalla? @relation(fields: [asignaturaEnMallaId], references: [id], onDelete: SetNull, onUpdate: SetNull)

  // mallaCurricularId String [ref: > malla_curricular.id, null]
  // carreraId String [ref: > carrera.id, null]
  @@map("competencias")
}

enum TipoCompetencia {
  ESPECIFICA
  GENERICA

  @@map("tipo_competencia")
}

enum TipoAsignatura {
  PRACTICA
  TEORICA
  TEORICA_PRACTICA

  @@map("tipo_asignatura")
}

model EjeFormativo {
  id     String @id @default(uuid())
  nombre String

  asignaturasEnMalla AsignaturaEnMalla[]

  @@map("ejes_formativos")
}

model AreaConocimiento {
  id     String  @id @default(uuid())
  nombre String
  codigo String?

  asignaturasEnMalla AsignaturaEnMalla[]

  @@map("areas_de_conocimiento")
}

model CampoFormacion {
  id     String @id @default(uuid())
  nombre String

  asignaturasEnMalla AsignaturaEnMalla[]

  @@map("campos_de_formacion")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires_in        Int?
  ext_expires_in    Int?

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@id([identifier, token])
  @@unique([identifier, token])
  @@map("verification_tokens")
}
