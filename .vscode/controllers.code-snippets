{
	// Place your snippets for typescript here. Each snippet is defined under a snippet name and has a prefix, body and
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"CREATE Endpoint Controller": {
		"prefix": "cec",
		"body": [
			"try {",
			"	ctx.log(`Http function processed request for url '${req.url}'`);",
			" ",
			"	const body = await req.json();",
			"	const bodyVal = createBodySchema.safeParse(body);",
			" ",
			"	if (!bodyVal.success) return CommonResponse.invalidBody()",
			" ",
			"	const new${1:Modulo} = await this._${1:modulo}Service.create${1:Modulo}(bodyVal.data);",
			" ",
			"	ctx.log({ new${1:Modulo} });",
			" ",
			"	return CommonResponse.successful({status: 201})",
			"} catch (error: any) {",
			"	return ErrorHandler.handle({ ctx, error })",
			"}"
		],
		"description": "Create a CREATE action Endpoint Controller."
	},
	"GET ALL Endpoint Controller": {
		"prefix": "gaec",
		"body": [
			"try {",
			"	ctx.log(`Http function processed request for url '${req.url}'`);",
			" ",
			"	const ${1:modulo} = await this._${1:modulo}Service.getAll${1:Modulo}();",
			" ",
			"	return CommonResponse.successful({ data: ${1:modulo} })",
			"} catch (error) {",
			"	return ErrorHandler.handle({ ctx, error })",
			"}"
		],
		"description": "Create a GET ALL action Endpoint Controller."
	},
	"GET BY ID Endpoint Controller": {
		"prefix": "gbiec",
		"body": [
			"try {",
			"	ctx.log(`Http function processed request for url '${req.url}'`);",
			"	const ${1:modulo}Id = req.params.${1:modulo}Id;",
			" ",
			"	if (!${1:modulo}Id) return CommonResponse.invalidId()",
			" ",
			"	const ${1:modulo} =",
			"		await this._${1:modulo}Service.get${1:modulo}ById(${1:modulo}Id);",
			" ",
			"	return CommonResponse.successful({ data: ${1:modulo} })",
			"} catch (error) {",
			"	return ErrorHandler.handle({ ctx, error });",
			"}"
		],
		"description": "Create a GET BY ID action Endpoint Controller."
	},
	"UPDATE BY ID Endpoint Controller": {
		"prefix": "ubiec",
		"body": [
			"try {",
			"	ctx.log(`Http function processed request for url '${req.url}'`);",
			"	const ${1:modulo}Id = req.params.${1:modulo}Id;",
			" ",
			"	if (!${1:modulo}Id) return CommonResponse.invalidId()",
			" ",
			"	const body = await req.json();",
			"	const bodyVal = updateBodySchema.safeParse(body);",
			" ",
			"	if (!bodyVal.success) return CommonResponse.invalidBody()",
			" ",
			"	const ${1:modulo} = await this._${1:modulo}Service.update${1:modulo}ById({",
			"		id: ${1:modulo}Id,",
			"		data: bodyVal.data,",
			"	});",
			" ",
			"	return CommonResponse.successful({ data: ${1:modulo} })",
			"} catch (error) {",
			"	return ErrorHandler.handle({ ctx, error });",
			"}"
		],
		"description": "Create a UPDATE BY ID action Endpoint Controller."
	},
	"DELETE BY ID Endpoint Controller": {
		"prefix": "dbiec",
		"body": [
			"try {",
			"	ctx.log(`Http function processed request for url '${req.url}'`);",
			" ",
			"	const ${1:modulo}Id = req.params.${1:modulo}Id;",
			" ",
			"	if (!${1:modulo}Id) return CommonResponse.invalidId()",
			" ",
			"	await this._${1:modulo}Service.delete${1:modulo}ById(${1:modulo}Id);",
			" ",
			"	return CommonResponse.successful()",
			"} catch (error) {",
			"	return ErrorHandler.handle({ ctx, error });",
			"}"
		],
		"description": "Create a DELETE BY ID action Endpoint Controller."
	}
}
